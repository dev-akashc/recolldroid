/* Copyright (C) 2024 Graham Bygrave
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the
 *   Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
package org.grating.recolldroid.data

interface RecollApiClient {
    /**
     * Pass the specified query to the recoll API for use in searching the recoll database.
     * Return a page of the resulting list of documents, who's indexes lie between first and last,
     * inclusive.
     *
     * @param query The recoll query string.
     * @param first The index (relative to the total list of results residing on the server)
     *              of the first document to be returned.
     * @param last The index (relative to the total list of results residing on the server)
     *              of the last document to be returned.
     * @return The results set generated by performing the specified query.
     */
    suspend fun search(query: String, first: Int, last: Int): ResultSet

    /**
     * Retrieve the preview text associated with the specified document identified by the query
     * that retrieved it and the document's position (i.e. index)  in the corresponding results set.
     *
     * @param query the query that returned the document of interest.
     * @param idx the document of interest's position with the result set returned by the query.
     * @return A holder object containing the preview text that recoll hold's for the document of
     *         interest or some error text.
     */
    suspend fun preview(query: String, idx: Int): ResultPreview

    /**
     * Retrieve the snippets list associated with the document identified by the query that retrieved
     * it and the document's position (i.e. index) in the corresponding results set.
     *
     * @param query the query that returned the document of interest.
     * @param idx the document of interest's position within the result set returned by the query.
     * @return A list of snippets for the document of interest.
     */
    suspend fun snippets(query: String, idx: Int): RecollSnippets

    /**
     * Retrieve the url for a temporary resource containing the internal document that the
     * query result identifies (by query and idx).
     *
     * @param query the query string.
     * @param idx the position of the result in the list returned when applying query.
     * @return A recoll document extract.
     */
    suspend fun extract(query: String, idx: Int): RecollDocumentExtract

    companion object {
        val STUB = object : RecollApiClient {
            override suspend fun search(query: String, first: Int, last: Int): ResultSet {
                throw Exception("RecollApiClient is a stub")
            }

            override suspend fun preview(query: String, idx: Int): ResultPreview {
                throw Exception("RecollApiClient is a stub")
            }

            override suspend fun snippets(query: String, idx: Int): RecollSnippets {
                throw Exception("RecollApiClient is a stub")
            }

            override suspend fun extract(query: String, idx: Int): RecollDocumentExtract {
                throw Exception("RecollApiClient is a stub")
            }
        }
    }
}

